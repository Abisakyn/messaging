"use strict";
/*
 * This code was generated by
 * ___ _ _ _ _ _    _ ____    ____ ____ _    ____ ____ _  _ ____ ____ ____ ___ __   __
 *  |  | | | | |    | |  | __ |  | |__| | __ | __ |___ |\ | |___ |__/ |__|  | |  | |__/
 *  |  |_|_| | |___ | |__|    |__| |  | |    |__] |___ | \| |___ |  \ |  |  | |__| |  \
 *
 * Twilio - Flex
 * This is the public Twilio REST API.
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.InsightsConversationalAiReportInsightsListInstance = exports.InsightsConversationalAiReportInsightsInstance = exports.InsightsConversationalAiReportInsightsContextImpl = void 0;
const util_1 = require("util");
const deserialize = require("../../../base/deserialize");
const serialize = require("../../../base/serialize");
const utility_1 = require("../../../base/utility");
class InsightsConversationalAiReportInsightsContextImpl {
    constructor(_version, instanceSid) {
        this._version = _version;
        if (!(0, utility_1.isValidPathParam)(instanceSid)) {
            throw new Error("Parameter 'instanceSid' is not valid.");
        }
        this._solution = { instanceSid };
        this._uri = `/Insights/Instances/${instanceSid}/AI/ReportInsights`;
    }
    fetch(params, callback) {
        if (params instanceof Function) {
            callback = params;
            params = {};
        }
        else {
            params = params || {};
        }
        let data = {};
        if (params["maxRows"] !== undefined)
            data["MaxRows"] = params["maxRows"];
        if (params["reportId"] !== undefined)
            data["ReportId"] = params["reportId"];
        if (params["granularity"] !== undefined)
            data["Granularity"] = params["granularity"];
        if (params["includeDate"] !== undefined)
            data["IncludeDate"] = serialize.iso8601DateTime(params["includeDate"]);
        const headers = {};
        const instance = this;
        let operationVersion = instance._version, operationPromise = operationVersion.fetch({
            uri: instance._uri,
            method: "get",
            params: data,
            headers,
        });
        operationPromise = operationPromise.then((payload) => new InsightsConversationalAiReportInsightsInstance(operationVersion, payload, instance._solution.instanceSid));
        operationPromise = instance._version.setPromiseCallback(operationPromise, callback);
        return operationPromise;
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */
    toJSON() {
        return this._solution;
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.InsightsConversationalAiReportInsightsContextImpl = InsightsConversationalAiReportInsightsContextImpl;
class InsightsConversationalAiReportInsightsInstance {
    constructor(_version, payload, instanceSid) {
        this._version = _version;
        this.instanceSid = payload.instance_sid;
        this.reportId = payload.report_id;
        this.periodStart = deserialize.iso8601DateTime(payload.period_start);
        this.periodEnd = deserialize.iso8601DateTime(payload.period_end);
        this.updated = deserialize.iso8601DateTime(payload.updated);
        this.insights = payload.insights;
        this.url = payload.url;
        this._solution = { instanceSid: instanceSid || this.instanceSid };
    }
    get _proxy() {
        this._context =
            this._context ||
                new InsightsConversationalAiReportInsightsContextImpl(this._version, this._solution.instanceSid);
        return this._context;
    }
    fetch(params, callback) {
        return this._proxy.fetch(params, callback);
    }
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */
    toJSON() {
        return {
            instanceSid: this.instanceSid,
            reportId: this.reportId,
            periodStart: this.periodStart,
            periodEnd: this.periodEnd,
            updated: this.updated,
            insights: this.insights,
            url: this.url,
        };
    }
    [util_1.inspect.custom](_depth, options) {
        return (0, util_1.inspect)(this.toJSON(), options);
    }
}
exports.InsightsConversationalAiReportInsightsInstance = InsightsConversationalAiReportInsightsInstance;
function InsightsConversationalAiReportInsightsListInstance(version) {
    const instance = ((instanceSid) => instance.get(instanceSid));
    instance.get = function get(instanceSid) {
        return new InsightsConversationalAiReportInsightsContextImpl(version, instanceSid);
    };
    instance._version = version;
    instance._solution = {};
    instance._uri = ``;
    instance.toJSON = function toJSON() {
        return instance._solution;
    };
    instance[util_1.inspect.custom] = function inspectImpl(_depth, options) {
        return (0, util_1.inspect)(instance.toJSON(), options);
    };
    return instance;
}
exports.InsightsConversationalAiReportInsightsListInstance = InsightsConversationalAiReportInsightsListInstance;
