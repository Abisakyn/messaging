/// <reference types="node" />
import { inspect, InspectOptions } from "util";
import V1 from "../V1";
/**
 * Options to pass to fetch a InsightsConversationalAiReportInsightsInstance
 */
export interface InsightsConversationalAiReportInsightsContextFetchOptions {
    /** Maximum number of rows to return */
    maxRows?: number;
    /** The type of report insights required to fetch.Like gauge,channel-metrics,queue-metrics */
    reportId?: string;
    /** The time period for which report insights is needed */
    granularity?: string;
    /** A reference date that should be included in the returned period */
    includeDate?: Date;
}
export interface InsightsConversationalAiReportInsightsContext {
    /**
     * Fetch a InsightsConversationalAiReportInsightsInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed InsightsConversationalAiReportInsightsInstance
     */
    fetch(callback?: (error: Error | null, item?: InsightsConversationalAiReportInsightsInstance) => any): Promise<InsightsConversationalAiReportInsightsInstance>;
    /**
     * Fetch a InsightsConversationalAiReportInsightsInstance
     *
     * @param params - Parameter for request
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed InsightsConversationalAiReportInsightsInstance
     */
    fetch(params: InsightsConversationalAiReportInsightsContextFetchOptions, callback?: (error: Error | null, item?: InsightsConversationalAiReportInsightsInstance) => any): Promise<InsightsConversationalAiReportInsightsInstance>;
    /**
     * Provide a user-friendly representation
     */
    toJSON(): any;
    [inspect.custom](_depth: any, options: InspectOptions): any;
}
export interface InsightsConversationalAiReportInsightsContextSolution {
    instanceSid: string;
}
export declare class InsightsConversationalAiReportInsightsContextImpl implements InsightsConversationalAiReportInsightsContext {
    protected _version: V1;
    protected _solution: InsightsConversationalAiReportInsightsContextSolution;
    protected _uri: string;
    constructor(_version: V1, instanceSid: string);
    fetch(params?: InsightsConversationalAiReportInsightsContextFetchOptions | ((error: Error | null, item?: InsightsConversationalAiReportInsightsInstance) => any), callback?: (error: Error | null, item?: InsightsConversationalAiReportInsightsInstance) => any): Promise<InsightsConversationalAiReportInsightsInstance>;
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */
    toJSON(): InsightsConversationalAiReportInsightsContextSolution;
    [inspect.custom](_depth: any, options: InspectOptions): string;
}
interface InsightsConversationalAiReportInsightsResource {
    instance_sid: string;
    report_id: string;
    period_start: Date;
    period_end: Date;
    updated: Date;
    insights: Array<any>;
    url: string;
}
export declare class InsightsConversationalAiReportInsightsInstance {
    protected _version: V1;
    protected _solution: InsightsConversationalAiReportInsightsContextSolution;
    protected _context?: InsightsConversationalAiReportInsightsContext;
    constructor(_version: V1, payload: InsightsConversationalAiReportInsightsResource, instanceSid?: string);
    /**
     * The Instance SID of the instance for which report insights is fetched
     */
    instanceSid: string;
    /**
     * The type of report insights required to fetch.Like gauge,channel-metrics,queue-metrics
     */
    reportId: string;
    /**
     * The start date from which report insights data is included
     */
    periodStart: Date;
    /**
     * The end date till report insights data is included
     */
    periodEnd: Date;
    /**
     * Updated time of the report insights
     */
    updated: Date;
    /**
     * List of report insights breakdown
     */
    insights: Array<any>;
    /**
     * The URL of this resource
     */
    url: string;
    private get _proxy();
    /**
     * Fetch a InsightsConversationalAiReportInsightsInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed InsightsConversationalAiReportInsightsInstance
     */
    fetch(callback?: (error: Error | null, item?: InsightsConversationalAiReportInsightsInstance) => any): Promise<InsightsConversationalAiReportInsightsInstance>;
    /**
     * Fetch a InsightsConversationalAiReportInsightsInstance
     *
     * @param params - Parameter for request
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed InsightsConversationalAiReportInsightsInstance
     */
    fetch(params: InsightsConversationalAiReportInsightsContextFetchOptions, callback?: (error: Error | null, item?: InsightsConversationalAiReportInsightsInstance) => any): Promise<InsightsConversationalAiReportInsightsInstance>;
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */
    toJSON(): {
        instanceSid: string;
        reportId: string;
        periodStart: Date;
        periodEnd: Date;
        updated: Date;
        insights: any[];
        url: string;
    };
    [inspect.custom](_depth: any, options: InspectOptions): string;
}
export interface InsightsConversationalAiReportInsightsSolution {
}
export interface InsightsConversationalAiReportInsightsListInstance {
    _version: V1;
    _solution: InsightsConversationalAiReportInsightsSolution;
    _uri: string;
    (instanceSid: string): InsightsConversationalAiReportInsightsContext;
    get(instanceSid: string): InsightsConversationalAiReportInsightsContext;
    /**
     * Provide a user-friendly representation
     */
    toJSON(): any;
    [inspect.custom](_depth: any, options: InspectOptions): any;
}
export declare function InsightsConversationalAiReportInsightsListInstance(version: V1): InsightsConversationalAiReportInsightsListInstance;
export {};
