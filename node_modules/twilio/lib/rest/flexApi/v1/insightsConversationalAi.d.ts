/// <reference types="node" />
import { inspect, InspectOptions } from "util";
import V1 from "../V1";
export type InsightsConversationalAiGranularity = "days" | "weeks" | "months" | "quarters" | "years";
/**
 * Options to pass to fetch a InsightsConversationalAiInstance
 */
export interface InsightsConversationalAiContextFetchOptions {
    /** Maximum number of rows to return */
    maxRows?: number;
    /** The type of report required to fetch.Like gauge,channel-metrics,queue-metrics */
    reportId?: string;
    /** The time period for which report is needed */
    granularity?: InsightsConversationalAiGranularity;
    /** A reference date that should be included in the returned period */
    includeDate?: Date;
}
export interface InsightsConversationalAiContext {
    /**
     * Fetch a InsightsConversationalAiInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed InsightsConversationalAiInstance
     */
    fetch(callback?: (error: Error | null, item?: InsightsConversationalAiInstance) => any): Promise<InsightsConversationalAiInstance>;
    /**
     * Fetch a InsightsConversationalAiInstance
     *
     * @param params - Parameter for request
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed InsightsConversationalAiInstance
     */
    fetch(params: InsightsConversationalAiContextFetchOptions, callback?: (error: Error | null, item?: InsightsConversationalAiInstance) => any): Promise<InsightsConversationalAiInstance>;
    /**
     * Provide a user-friendly representation
     */
    toJSON(): any;
    [inspect.custom](_depth: any, options: InspectOptions): any;
}
export interface InsightsConversationalAiContextSolution {
    instanceSid: string;
}
export declare class InsightsConversationalAiContextImpl implements InsightsConversationalAiContext {
    protected _version: V1;
    protected _solution: InsightsConversationalAiContextSolution;
    protected _uri: string;
    constructor(_version: V1, instanceSid: string);
    fetch(params?: InsightsConversationalAiContextFetchOptions | ((error: Error | null, item?: InsightsConversationalAiInstance) => any), callback?: (error: Error | null, item?: InsightsConversationalAiInstance) => any): Promise<InsightsConversationalAiInstance>;
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */
    toJSON(): InsightsConversationalAiContextSolution;
    [inspect.custom](_depth: any, options: InspectOptions): string;
}
interface InsightsConversationalAiResource {
    instance_sid: string;
    report_id: string;
    granularity: InsightsConversationalAiGranularity;
    period_start: Date;
    period_end: Date;
    updated: Date;
    total_pages: number;
    page: number;
    rows: Array<any>;
    url: string;
}
export declare class InsightsConversationalAiInstance {
    protected _version: V1;
    protected _solution: InsightsConversationalAiContextSolution;
    protected _context?: InsightsConversationalAiContext;
    constructor(_version: V1, payload: InsightsConversationalAiResource, instanceSid?: string);
    /**
     * Sid of Flex Service Instance
     */
    instanceSid: string;
    /**
     * The type of report required to fetch.Like gauge,channel-metrics,queue-metrics
     */
    reportId: string;
    granularity: InsightsConversationalAiGranularity;
    /**
     * The start date from which report data is included
     */
    periodStart: Date;
    /**
     * The end date till report data is included
     */
    periodEnd: Date;
    /**
     * Updated time of the report
     */
    updated: Date;
    /**
     * Represents total number of pages fetched report has
     */
    totalPages: number;
    /**
     * Page offset required for pagination
     */
    page: number;
    /**
     * List of report breakdown
     */
    rows: Array<any>;
    /**
     * The URL of this resource.
     */
    url: string;
    private get _proxy();
    /**
     * Fetch a InsightsConversationalAiInstance
     *
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed InsightsConversationalAiInstance
     */
    fetch(callback?: (error: Error | null, item?: InsightsConversationalAiInstance) => any): Promise<InsightsConversationalAiInstance>;
    /**
     * Fetch a InsightsConversationalAiInstance
     *
     * @param params - Parameter for request
     * @param callback - Callback to handle processed record
     *
     * @returns Resolves to processed InsightsConversationalAiInstance
     */
    fetch(params: InsightsConversationalAiContextFetchOptions, callback?: (error: Error | null, item?: InsightsConversationalAiInstance) => any): Promise<InsightsConversationalAiInstance>;
    /**
     * Provide a user-friendly representation
     *
     * @returns Object
     */
    toJSON(): {
        instanceSid: string;
        reportId: string;
        granularity: InsightsConversationalAiGranularity;
        periodStart: Date;
        periodEnd: Date;
        updated: Date;
        totalPages: number;
        page: number;
        rows: any[];
        url: string;
    };
    [inspect.custom](_depth: any, options: InspectOptions): string;
}
export interface InsightsConversationalAiSolution {
}
export interface InsightsConversationalAiListInstance {
    _version: V1;
    _solution: InsightsConversationalAiSolution;
    _uri: string;
    (instanceSid: string): InsightsConversationalAiContext;
    get(instanceSid: string): InsightsConversationalAiContext;
    /**
     * Provide a user-friendly representation
     */
    toJSON(): any;
    [inspect.custom](_depth: any, options: InspectOptions): any;
}
export declare function InsightsConversationalAiListInstance(version: V1): InsightsConversationalAiListInstance;
export {};
